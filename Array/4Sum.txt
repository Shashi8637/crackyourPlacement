class Solution {
public:
    vector<vector<int>> fourSum(vector<int>& nums, int target) {
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;
        int n = nums.size();

        for(int i=0; i<n-3; i++){
            if(i>0 && nums[i]==nums[i-1]) continue; //skip dublicate element
            for(int j=i+1; j<n-2; j++){
                if(j>i+1 && nums[j]==nums[j-1]) continue; //skip dublicate element
                int left = j+1;
                int right = n-1;
                while(left<right){
                    long long sum = (long long)nums[i]+nums[j]+nums[left]+nums[right];

                    if(sum==target){
                        ans.push_back({nums[i],nums[j],nums[left],nums[right]});

                        //skip dublicate 
                        while(left<right && nums[left]==nums[left+1]) left++;
                        while(left<right && nums[right]==nums[right-1]) right--;

                        left++;
                        right--;
                    }
                    else if(sum<target){
                        left++;
                    }else{
                        right--;
                    }
                    
                }
            }

        }

        return ans;







  Brute force approach

        // set<vector<int>>uniqueSet;
        // int n = nums.size();
        // for(int i=0; i<n; i++){
        //     for(int j=i+1; j<n; j++){
        //         for(int k=j+1; k<n; k++){
        //             for(int l=k+1; l<n; l++){
        //                 int sum = nums[i]+nums[j]+nums[k]+nums[l];
        //                 if(sum==target){
        //                     vector<int>temp = {nums[i],nums[j],nums[k],nums[l]};
        //                     uniqueSet.insert(temp);
        //                 }
        //             }
        //         }
        //     }
        // }
        // for(auto &uniq : uniqueSet){
        //     ans.push_back(uniq);
        // }
        // return ans;
    }
};