class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {
        int n = nums.size();
        sort(nums.begin(),nums.end());
        vector<vector<int>>ans;

        for(int i=0; i<n-2; i++){
           int left = i+1;
           int right = n-1;
           //skip the duplicate elements;
           if(i>0 && nums[i]==nums[i-1]) continue;
           while(left<right){
            int sum = nums[i]+nums[left]+nums[right];
            if(sum==0){
                ans.push_back({nums[i],nums[left],nums[right]});
               
                while(left<right && nums[left]==nums[left+1]) left++;
                while(left<right && nums[right]==nums[right-1]) right--;

                left++;
                right--;
            }
            else if(sum<0){
                left++;
            }
            else{
                right--;
            }
           } 
        }
         return ans;







Brute force Approach

        // set<vector<int>>uniquetre;
        // for(int i=0; i<n; i++){
        //     for(int j=i+1; j<n; j++){
        //         for(int k=j+1; k<n; k++){
        //             if(nums[i]+nums[j]+nums[k]==0){
        //                 vector<int>temp = {nums[i],nums[j],nums[k]};
        //                 //  ans.push_back(temp);
        //                  uniquetre.insert(temp);
        //             }
                   
        //         }
        //     }
            
        // }
        // for(auto &tri :uniquetre){
        //     ans.push_back(tri);
        // }
        //return ans;
    }
};