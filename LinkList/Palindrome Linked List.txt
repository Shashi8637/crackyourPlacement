/**
 * Definition for singly-linked list.
 * struct ListNode {
 *     int val;
 *     ListNode *next;
 *     ListNode() : val(0), next(nullptr) {}
 *     ListNode(int x) : val(x), next(nullptr) {}
 *     ListNode(int x, ListNode *next) : val(x), next(next) {}
 * };
 */
class Solution {
public:
    ListNode* reverseNode(ListNode* head){
        ListNode* Prev = NULL;
        ListNode* Curr = head;
        ListNode* Next = NULL;

        while(Curr!=NULL){
            Next = Curr->next;
            Curr->next = Prev;
            Prev = Curr;
            Curr = Next;
        }
        return Prev;

    }
    bool isPalindrome(ListNode* head) {
       ListNode* fast = head;
       ListNode* slow = head;
       while(fast!=NULL && fast->next!=NULL){
        slow = slow->next;
        fast = fast->next->next;
       }

       ListNode* temp = head;
       ListNode* revMid = reverseNode(slow);
       while(revMid!=NULL){
        if(revMid->val!=temp->val){
            return false;
        }
        revMid = revMid->next;
        temp = temp->next;
       }

       return true;


    }
};