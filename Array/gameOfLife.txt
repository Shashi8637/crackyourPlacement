class Solution {
public:
     bool isValidNeighbor(int x, int y, vector<vector<int>>& board) {
        return (x >= 0 && x < board.size() && y >= 0 && y < board[0].size());
    }


    void gameOfLife(vector<vector<int>>& board) {
        vector<int> dx = {0, 0, 1, 1, 1, -1, -1, -1};
        vector<int> dy = {1, -1, 1, -1, 0, 0, 1, -1};

        for(int row=0; row<board.size(); row++){
            for(int col=0; col<board[0].size(); col++){
                int countNabiour = 0;
                for(int i=0; i<8; i++){
                    int currRow = row + dx[i];
                    int currCol = col + dy[i];
                    if(isValidNeighbor(currRow, currCol,board) && abs(board[currRow][currCol])==1){
                        countNabiour++;
                    }
                }
                if (board[row][col] == 1 && (countNabiour < 2 ||countNabiour > 3)) board[row][col] = -1;
                
                if (board[row][col] == 0 && countNabiour == 3) board[row][col] = 2;
                    
                
            }
        }

            for(int row=0; row<board.size(); row++){
                for(int col=0; col<board[0].size(); col++){
                     if (board[row][col] >= 1)
                    board[row][col] = 1;
                else
                    board[row][col] = 0;
                
            }
        }

    
    }
};